name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: myapp_test
          MYSQL_USER: myapp
          MYSQL_PASSWORD: myapppassword
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping"  --health-interval=30s --health-interval=10s --health-timeout=5s --health-retries=3 --network-alias=mysql

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl default-mysql-client libjemalloc2 libvips

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: 1.1.27

      - name: Install Node dependencies
        run: bun install

      - name: Wait for MySQL to be ready
        run: |
          while ! mysqladmin ping -h "127.0.0.1" --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: mysql2://myapp:myapppassword@127.0.0.1:3306/myapp_test
        run: bin/rails db:test:prepare test test:system

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

      - name: Check MySQL logs
        run: docker logs ${{ job.services.mysql.id }}